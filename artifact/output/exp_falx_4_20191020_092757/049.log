R[write to console]: 
Attaching package: ‘dplyr’


R[write to console]: The following objects are masked from ‘package:stats’:

    filter, lag


R[write to console]: The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


[info] Parsing spec ...
[info] Parsing succeeded
[info] Building synthesizer ...
[info] Synthesizing programs ...
[info] Solution not found!
[info] Synthesizing programs ...
R[write to console]: Error: Each row of output must be identified by a unique combination of keys.
Keys are shared for 12 rows:
* 6, 10
* 11, 13
* 17, 19
* 1, 4, 18, 20
* 2, 5

Call `rlang::last_error()` to see a backtrace

R[write to console]: In addition: 
R[write to console]: There were 14 warnings (use warnings() to see them)
R[write to console]: 

[error] Error in interpreting spread...
R[write to console]: Error: Each row of output must be identified by a unique combination of keys.
Keys are shared for 12 rows:
* 6, 10
* 11, 13
* 17, 19
* 1, 4, 18, 20
* 2, 5

Call `rlang::last_error()` to see a backtrace

[error] Error in interpreting spread...
R[write to console]: Error: Each row of output must be identified by a unique combination of keys.
Keys are shared for 12 rows:
* 6, 10
* 11, 13
* 17, 19
* 1, 4, 18, 20
* 2, 5

Call `rlang::last_error()` to see a backtrace

[error] Error in interpreting spread...
R[write to console]: Error: Each row of output must be identified by a unique combination of keys.
Keys are shared for 12 rows:
* 6, 10
* 11, 13
* 17, 19
* 1, 4, 18, 20
* 2, 5

Call `rlang::last_error()` to see a backtrace

[error] Error in interpreting spread...
R[write to console]: Error: Each row of output must be identified by a unique combination of keys.
Keys are shared for 12 rows:
* 17, 19
* 18, 20
* 6, 10
* 11, 13
* 1, 4
* 2, 5

Call `rlang::last_error()` to see a backtrace

[error] Error in interpreting spread...
[info] # candidates before getting the correct solution: 10
[info] Solution found: [separate(@param0, 1), spread(separate(@param0, 1), 1, 4)]
====> run synthesize 049.json
# num samples per layer: 4
                   scenario  value
1    measured_raw21_nodrain   55.0
2    measured_raw22_nodrain   60.0
3   simulated_raw21_nodrain   54.0
4      measured_raw21_drain   55.0
5      measured_raw22_drain   60.0
6    measured_adj21_nodrain   23.0
7   simulated_raw22_nodrain   59.0
8     simulated_raw21_drain   54.5
9     simulated_raw22_drain   60.2
10     measured_adj21_drain   23.0
11   measured_adj22_nodrain   27.0
12  simulated_adj21_nodrain   22.0
13     measured_adj22_drain   27.0
14    simulated_adj21_drain   23.4
15  simulated_adj22_nodrain   27.5
16    simulated_adj22_drain   27.2
17     measured_0.5_nodrain   40.0
18     measured_0.8_nodrain   55.0
19       measured_0.5_drain   40.0
20       measured_0.8_drain   55.0
21    simulated_0.5_nodrain   41.0
22    simulated_0.8_nodrain   56.0
23      simulated_0.5_drain   39.9
24      simulated_0.8_drain   55.3
    c_x   c_y c_color c_column
1  55.0  55.3     0.8    drain
2  23.0  23.4   adj21    drain
3  60.0  59.0   raw22  nodrain
4  55.0  54.5   raw21    drain
# candidates before getting the correct solution: 10
## synthesize result for task 049.json
# table_prog:
  [separate(@param0, 1), spread(separate(@param0, 1), 1, 4)]
# vis_spec:
    {'mark': 'point', 'encoding': {'x': {'field': 'measured', 'type': 'quantitative'}, 'y': {'field': 'simulated', 'type': 'quantitative'}, 'color': {'field': 'COL462', 'type': 'nominal'}, 'column': {'field': 'COL463', 'type': 'nominal'}}}
# time used (s): 9.9787

real	0m11.478s
user	0m10.960s
sys	0m0.260s
